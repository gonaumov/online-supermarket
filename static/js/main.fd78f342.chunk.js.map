{"version":3,"sources":["actions/actions.ts","constants/ActionTypes.ts","selectors/categories.ts","components/Menu.tsx","utils.ts","selectors/products.ts","components/Products.tsx","components/SearchInput.tsx","components/Home.tsx","App.tsx","initialState.ts","reducers/supermarket.ts","serviceWorker.ts","index.tsx"],"names":["getCategories","categories","payload","type","getProducts","products","state","routeParams","params","categoryId","map","category","id","selected","title","Menu","this","props","react_default","a","createElement","className","c","NavLink","to","key","activeClassName","Component","productCategoriesKeyGenerator","product","reduce","concat","slice","search","filter","description","includes","filterProductsByCategory","find","e","undefined","Products","_this$props","toggleDescription","Fragment","onClick","connect","ownProps","match","dispatch","toggleProductVisibility","SearchInput","setSearch","value","onChange","preventDefault","target","setSearchText","Home","_this","loadCategories","then","loadProducts","components_Menu","components_SearchInput","components_Products","fetch","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","data","result","wrap","_context","prev","next","json","sent","abrupt","stop","_x","apply","arguments","_ref2","_callee2","_context2","_x2","App","store","react_redux_es","BrowserRouter","basename","process","Route","path","component","initialState","supermaket","length","action","objectSpread","Boolean","window","location","hostname","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","supermarket","applyMiddleware","thunk","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fd78f342.chunk.js","sourcesContent":["import { Dispatch } from \"redux\";\nimport {Action, ActionCreator, AnyAction} from \"redux\";\nimport {ThunkAction} from \"redux-thunk\";\nimport {GET_CATEGORIES, GET_PRODUCTS, SET_SEARCH_TEXT, TOGGLE_PRODUCT_VISIBILITY} from \"../constants/ActionTypes\";\n\nexport const toggleProductVisibility = (id: string) => ({\n    id,\n    type: TOGGLE_PRODUCT_VISIBILITY,\n});\n\nexport const setSearchText = (search: string) => ({\n    search,\n    type: SET_SEARCH_TEXT,\n});\n\nconst getCategories = (categories: Category[]) => ({\n    payload: categories,\n    type: GET_CATEGORIES,\n});\n\nconst getProducts = (products: Product[]) => ({\n    payload: products,\n    type: GET_PRODUCTS,\n});\n\nexport const getCategoriesAction: ActionCreator<ThunkAction<Promise<Action>, State, {}, AnyAction>> = () => {\n        return (dispatch: Dispatch): Promise<Action> => {\n        return fetch(\"categories.json\").then(async (data) => {\n            const result = await data.json();\n            const categories: Category[] = result.data.map((category: Category): Category => ({\n                id: category.id,\n                selected: false,\n                title: category.title,\n            }));\n            return dispatch(getCategories(categories));\n        });\n    };\n};\n\nexport const getProductsAction: ActionCreator<ThunkAction<Promise<Action>, State, {}, AnyAction>> = () => {\n    return async (dispatch: Dispatch): Promise<Action> => {\n        const data = await fetch(\"products.json\");\n        const result = await data.json();\n        const products: Product[] = result.data.map((product: Product): Product => {\n            const categories: Entity[] = product.categories.map((category: Entity): Entity => ({\n                id: category.id,\n            }));\n            return {\n                categories,\n                description: product.description,\n                id: product.id,\n                selected: false,\n                title: product.title,\n            };\n        });\n        return dispatch(getProducts(products));\n    };\n};\n","export const TOGGLE_PRODUCT_VISIBILITY = \"TOGGLE_PRODUCT_VISIBILITY\";\nexport const SET_SEARCH_TEXT = \"SET_SEARCH_TEXT\";\nexport const GET_CATEGORIES = \"GET_CATEGORIES\";\nexport const GET_PRODUCTS = \"GET_PRODUCTS\";\n","import {match} from \"react-router\";\n\nconst categories = (state: State, routeParams: match<{categoryId: string | undefined}>): Category[] => {\n    if (typeof routeParams.params.categoryId === \"undefined\") {\n        return state.categories;\n    }\n\n    return state.categories.map((category) => (category.id === routeParams.params.categoryId ? {\n        id: category.id,\n        selected: true,\n        title: category.title,\n    } : category));\n};\n\nexport default categories;\n","import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\ninterface IOwnProps {\n    categories: Category[];\n}\n\nclass Menu extends Component<IOwnProps> {\n    public render() {\n        const { categories } = this.props;\n        return (\n            <div className=\"menu\">\n                {categories.map((c) => (\n                    <NavLink to={\"/\" + c.id} key={c.title + c.id} activeClassName=\"active\">{c.title}</NavLink>\n                ))}\n            </div>\n        );\n    }\n}\n\nexport default Menu;\n","export const filterProductsByCategoryFactory = (categoryId: string) => (products: Product[]): Product[] => (\n    products.filter((product: Product) => (\n        product.categories.find((e: Entity) => (\n                e.id === categoryId\n            ) !== undefined,\n        )))\n);\n\nexport const productCategoriesKeyGenerator = (product: Product): string => (\n    product.categories.reduce((a, c) => a.concat(c.id) + \",\", \"\").slice(0, -1)\n);\n","import {match} from \"react-router\";\nimport {filterProductsByCategoryFactory} from \"../utils\";\n\nconst products = (state: State, routeParams: match<{categoryId: string | undefined}>): Product[] => {\n    if (typeof routeParams.params.categoryId === \"undefined\") {\n        return typeof state.search === \"string\" || state.search !== null  ?\n            state.products.filter((product) => (product.description.includes(state.search!) ||\n                product.title.includes(state.search!))) :\n            state.products;\n    }\n\n    const filterProductsByCategory = filterProductsByCategoryFactory(routeParams.params.categoryId);\n\n    return typeof state.search === \"string\" || state.search !== null ?\n        filterProductsByCategory(state.products).\n        filter((product) => (product.description.includes(state.search!) ||\n            product.title.includes(state.search!)))\n        :\n        filterProductsByCategory(state.products);\n\n};\n\nexport default products;\n","import React, {Component} from \"react\";\nimport {connect, MapDispatchToProps, MapStateToPropsParam} from \"react-redux\";\nimport {match} from \"react-router-dom\";\nimport {toggleProductVisibility} from \"../actions/actions\";\nimport products from \"../selectors/products\";\nimport {productCategoriesKeyGenerator} from \"../utils\";\n\n\ninterface IStateProps {\n    products: Product[];\n}\n\ninterface IOwnProps {\n    match: match<{ categoryId: string | undefined }>;\n}\n\ninterface ITDispatchProps {\n    toggleDescription: (id: string) => void;\n}\n\nclass Products extends Component<IOwnProps & IStateProps & ITDispatchProps> {\n    public render() {\n        const {products, toggleDescription} = this.props;\n        return (\n            <ul className=\"productlist\">\n                {products.map((product) => (\n                    <React.Fragment key={productCategoriesKeyGenerator(product) + \"productKey\" + product.id}>\n                        <li className=\"product\" onClick={() => toggleDescription(product.id)}>{product.title}</li>\n                        {product.selected &&\n                        <li className=\"productdescription\" key={productCategoriesKeyGenerator(product) + product.title}>\n                            {product.description}\n                        </li>}\n                    </React.Fragment>\n                ))}\n            </ul>\n        );\n    }\n}\n\nconst mapStateToProps: MapStateToPropsParam<IStateProps, IOwnProps, State> = (state: State, ownProps) => {\n    return {\n        products: products(state, ownProps.match),\n    };\n};\n\nconst mapDispatchToProps: MapDispatchToProps<ITDispatchProps, IOwnProps> = (dispatch: any) => {\n    return {\n        toggleDescription: (id: string) => {\n            dispatch(toggleProductVisibility(id));\n        },\n    };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Products);\n","import React, {Component} from \"react\";\nimport {\n    connect,\n    MapDispatchToProps,\n    MapStateToProps,\n    } from \"react-redux\";\nimport {Dispatch} from \"redux\";\nimport {setSearchText} from \"../actions/actions\";\n\ninterface IStateProps {\n    search: string | null;\n}\n\ninterface ITDispatchProps {\n    setSearch: (searchValue: string) => void;\n}\n\nclass SearchInput extends Component<IStateProps & ITDispatchProps> {\n    public render() {\n        const {search, setSearch} = this.props;\n        const setSearchHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n            e.preventDefault();\n            setSearch(e.target.value);\n        };\n\n        return (\n            <div className=\"searchinput\">\n                <input type=\"text\" value={search !== null ? search : \"\"}\n                       onChange={setSearchHandler}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps: MapStateToProps<IStateProps, {}, State> = (state: State) => ({search: state.search});\n\nconst mapDispatchToProps: MapDispatchToProps<ITDispatchProps, {}> = (dispatch: Dispatch) => {\n    return {\n        setSearch: (search: string) => {\n            dispatch(setSearchText(search));\n        },\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchInput);\n","import React, {Component} from \"react\";\nimport { connect } from \"react-redux\";\nimport { match } from \"react-router\";\nimport { Action, AnyAction} from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport {getCategoriesAction, getProductsAction} from \"../actions/actions\";\nimport categories from \"../selectors/categories\";\nimport Menu from \"./Menu\";\nimport Products from \"./Products\";\nimport SearchInput from \"./SearchInput\";\n\ninterface IOwnProps {\n    categories: Category[];\n    match: match<{categoryId: string | undefined}>;\n}\n\ninterface ITDispatchProps {\n    loadCategories: () => Promise<Action>;\n    loadProducts: () => Promise<Action>;\n}\n\nclass Home extends Component<IOwnProps & ITDispatchProps> {\n    public componentDidMount() {\n        this.props.loadCategories().then(() => {\n            this.props.loadProducts();\n        });\n    }\n    public render() {\n        const {categories, match} = this.props;\n        return (\n            <div className=\"container\">\n                <Menu categories={categories}/>\n                <div className=\"app\">\n                    <SearchInput/>\n                    <Products match={match}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: State, ownProps: IOwnProps) => {\n    return {\n        categories: categories(state, ownProps.match),\n    };\n};\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<State, {}, AnyAction>) => ({\n    loadCategories: () => {\n        return dispatch(getCategoriesAction());\n    },\n    loadProducts: () => {\n        return dispatch(getProductsAction());\n    },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport {AnyAction, Store} from \"redux\";\nimport Home from \"./components/Home\";\n\nconst App = ({store}: {store: Store<State, AnyAction>}) => (\n    <Provider store={store}>\n      <Router basename={process.env.PUBLIC_URL}>\n        <Route path=\"/:categoryId?\" component={Home} />\n      </Router>\n    </Provider>\n);\n\nexport default App;\n","const initialState: State = {\n    categories: [],\n    products: [],\n    search: null,\n};\n\nexport default initialState;\n","import {AnyAction} from \"redux\";\nimport {GET_CATEGORIES, GET_PRODUCTS, SET_SEARCH_TEXT, TOGGLE_PRODUCT_VISIBILITY} from \"../constants/ActionTypes\";\nimport initialState from \"../initialState\";\n\nconst supermaket = (state: State = initialState, action: AnyAction) => {\n    switch (action.type) {\n        case TOGGLE_PRODUCT_VISIBILITY:\n            return {\n                ...state,\n                products: state.products.map((product) => (\n                    product.id === action.id ? {\n                        ...product,\n                        selected: !product.selected,\n                    } : product\n                )),\n            };\n        case SET_SEARCH_TEXT:\n            if (action.search && action.search !== null) {\n                return {\n                    ...state,\n                    search: action.search,\n                };\n            }\n\n            return {\n                ...state,\n                search: null,\n            };\n        case GET_CATEGORIES:\n            if (action.payload) {\n                return {\n                    ...state,\n                    categories: action.payload,\n                };\n            }\n\n            return state;\n        case GET_PRODUCTS:\n            if (action.payload) {\n                return {\n                    ...state,\n                    products: action.payload,\n                };\n            }\n\n            return state;\n\n        default:\n            return state;\n    }\n};\n\nexport default supermaket;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { applyMiddleware, compose, createStore  } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport initialState from \"./initialState\";\nimport supermarket from \"./reducers/supermarket\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(supermarket, initialState, composeEnhancers(applyMiddleware(thunk)));\n\nReactDOM.render(<App store={store} />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}